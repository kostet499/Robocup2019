# Generated by CMake, don't edit, changes will be lost.
#
# Config file for Soprano
# The following variables are defined:
# Soprano_FOUND       - True if Soprano has been found.
# Soprano_BINARY_DIR  - The binaries directory.
# Soprano_DATA_DIR    - The data directory.
# Soprano_INCLUDE_DIR - The include directory.
# Soprano_LIBRARY_DIR - The libraries directory.
#
# Soprano_LIBRARIES        - The Soprano core library to link to (libsoprano).
# Soprano_client_LIBRARIES - The Soprano client library (libsopranoclient).
# Soprano_index_LIBRARIES  - The Soprano index library (libsopranoindex).
# Soprano_server_LIBRARIES - The Soprano server library (libsopranoserver).
#
# SOPRANO_ONTO2VOCABULARYCLASS_EXECUTABLE - The onto2vocabularyclass program.
# SOPRANO_SOPRANOCMD_EXECUTABLE           - The sopranocmd program.
#
# Additionally, the following components are supported:
#   PLUGIN_NQUADPARSER
#   PLUGIN_NQUADSERIALIZER
#   PLUGIN_RAPTORPARSER
#   PLUGIN_RAPTORSERIALIZER
#   PLUGIN_REDLANDBACKEND
#   PLUGIN_SESAME2BACKEND
#   PLUGIN_VIRTUOSOBACKEND
#
# The following variables are defined for compatibility purpose.
# They should be considered deprecated.
# SOPRANO_FOUND       - True if Soprano has been found.
# SOPRANO_INCLUDE_DIR - The include directory.
# SOPRANO_MIN_VERSION - The minimum version to look for.
# SOPRANO_VERSION     - The Soprano version.
# SOPRANO_LIBRARIES        - The Soprano core library to link to (libsoprano).
# SOPRANO_CLIENT_LIBRARIES - The Soprano client library (libsopranoclient).
# SOPRANO_INDEX_LIBRARIES  - The Soprano index library (libsopranoindex).
# SOPRANO_SERVER_LIBRARIES - The Soprano server library (libsopranoserver).


####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######
####### Any changes to this file will be overwritten by the next CMake run ####
####### The input file was SopranoConfig.cmake.in                            ########

get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../../" ABSOLUTE)

# Use original install prefix when loaded through a "/usr move"
# cross-prefix symbolic link such as /lib -> /usr/lib.
get_filename_component(_realCurr "${CMAKE_CURRENT_LIST_DIR}" REALPATH)
get_filename_component(_realOrig "/usr/lib/cmake/Soprano" REALPATH)
if(_realCurr STREQUAL _realOrig)
  set(PACKAGE_PREFIX_DIR "/usr")
endif()
unset(_realOrig)
unset(_realCurr)

macro(set_and_check _var _file)
  set(${_var} "${_file}")
  if(NOT EXISTS "${_file}")
    message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")
  endif()
endmacro()

macro(check_required_components _NAME)
  foreach(comp ${${_NAME}_FIND_COMPONENTS})
    if(NOT ${_NAME}_${comp}_FOUND)
      if(${_NAME}_FIND_REQUIRED_${comp})
        set(${_NAME}_FOUND FALSE)
      endif()
    endif()
  endforeach()
endmacro()

####################################################################################

########## The Soprano version ##########
set(Soprano_VERSION_MAJOR 2)
set(Soprano_VERSION_MINOR 9)
set(Soprano_VERSION_PATCH 4)
set(Soprano_VERSION       2.9.4)
#########################################

########## Install dirs ##########
set_and_check(Soprano_BINARY_DIR  "${PACKAGE_PREFIX_DIR}/bin")
set_and_check(Soprano_DATA_DIR    "${PACKAGE_PREFIX_DIR}/share")
set_and_check(Soprano_INCLUDE_DIR "${PACKAGE_PREFIX_DIR}/include")
set_and_check(Soprano_LIBRARY_DIR "${PACKAGE_PREFIX_DIR}/lib")
set_and_check(Soprano_MACRO_DIR   "${Soprano_DATA_DIR}/soprano/cmake")
##################################

########## Soprano programs ##########
set_and_check(SOPRANO_ONTO2VOCABULARYCLASS_EXECUTABLE "${PACKAGE_PREFIX_DIR}/bin/onto2vocabularyclass")
set(SOPRANO_SOPRANOCMD_EXECUTABLE "${PACKAGE_PREFIX_DIR}/bin/sopranocmd")
######################################

########## The Soprano libraries ##########
# Load the exported targets.
include("${CMAKE_CURRENT_LIST_DIR}/SopranoTargets.cmake")
set(Soprano_LIBRARIES        Soprano::soprano)
set(Soprano_client_LIBRARIES Soprano::sopranoclient)
set(Soprano_index_LIBRARIES  Soprano::sopranoindex)
set(Soprano_server_LIBRARIES Soprano::sopranoserver)
###########################################

# Load the SopranoAddOntology.cmake file
include(${Soprano_MACRO_DIR}/SopranoAddOntology.cmake)

########## Components handling ##########
set(Soprano_PLUGIN_REDLANDBACKEND_FOUND   TRUE)
set(Soprano_PLUGIN_SESAME2BACKEND_FOUND   FALSE)
set(Soprano_PLUGIN_VIRTUOSOBACKEND_FOUND  FALSE)
set(Soprano_PLUGIN_RAPTORPARSER_FOUND     TRUE)
set(Soprano_PLUGIN_RAPTORSERIALIZER_FOUND TRUE)
#########################################

########## Backward compatibility variables ##########
set(SOPRANO_FOUND            ${Soprano_FOUND})
set(SOPRANO_INCLUDE_DIR      ${Soprano_INCLUDE_DIR})
set(SOPRANO_VERSION          ${Soprano_VERSION})
set(SOPRANO_LIBRARIES        ${Soprano_LIBRARIES})
set(SOPRANO_CLIENT_LIBRARIES ${Soprano_client_LIBRARIES})
set(SOPRANO_INDEX_LIBRARIES  ${Soprano_index_LIBRARIES})
set(SOPRANO_SERVER_LIBRARIES ${Soprano_server_LIBRARIES})

# DEPRECATED: Use find_package(Soprano x.y.z) instead
if(SOPRANO_MIN_VERSION)
  set(Soprano_FIND_VERSION ${SOPRANO_MIN_VERSION})
endif()

# FindSoprano.cmake used to change CMAKE_MODULE_PATH in order to allow loading
# SopranoAddOntology.cmake.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${Soprano_MACRO_DIR})

# The following components are defined in FindSoprano.cmake. However, these plugins
# are always built. The components are consequently always found.
set(Soprano_PLUGIN_NQUADPARSER_FOUND TRUE)
set(Soprano_PLUGIN_NQUADSERIALIZER_FOUND TRUE)

# FindSoprano.cmake did set SOPRANO_${COMPONENT}_FOUND (all uppercase)
foreach(COMPONENT ${Soprano_FIND_COMPONENTS})
  set(SOPRANO_${COMPONENT}_FOUND ${Soprano_${COMPONENT}_FOUND})
endforeach()
######################################################

# The following line *must* be at the end of the file
check_required_components(Soprano)
